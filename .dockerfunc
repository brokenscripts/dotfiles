#!/bin/bash
# Bash wrappers for docker run commands

export DOCKER_REPO_PREFIX=jess

#
# Helper Functions
#
dcleanup(){
	local containers
	mapfile -t containers < <(docker ps -aq 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	mapfile -t volumes < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}
del_stopped(){
	local name=$1
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}
rmctr(){
	# shellcheck disable=SC2068
	docker rm -f $@ 2>/dev/null || true
}
relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}
start_else_create(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]]; then
			echo "$container is not running, starting it for you."
			docker start $container
		elif [[ "$state" == "" ]]; then
			echo "$container does not exist, creating it."
			$container
		fi
	done
}

#
# Container Aliases
#
airbase(){
	del_stopped airbase

	docker run -it \
		-v ${PWD}:/tester \
		-w="/tester"
		--net host \
		--privileged \
		--entrypoint airbase-ng \
		--name airbase \
		brokenscripts/aircrack "$@"
}
aircrack(){
	del_stopped aircrack

	docker run -it \
		-v ${PWD}:/tester \
		-w="/tester"
		--net host \
		--privileged \
		--name aircrack \
		brokenscripts/aircrack "$@"
}
airdecap(){
	del_stopped airdecap

	docker run -it \
		-v ${PWD}:/tester \
		-w="/tester"
		--net host \
		--privileged \
		--entrypoint airdecap-ng \
		--name airdecap \
		brokenscripts/aircrack "$@"
}
airdecloak(){
	del_stopped airdecloak

	docker run -it \
		-v ${PWD}:/tester \
		-w="/tester"
		--net host \
		--privileged \
		--entrypoint airdecloak-ng \
		--name airdecloak \
		brokenscripts/aircrack "$@"
}
aireplay(){
	del_stopped aireplay

	docker run -it \
		-v ${PWD}:/tester \
		-w="/tester"
		--net host \
		--privileged \
		--entrypoint aireplay-ng \
		--name aireplay \
		brokenscripts/aircrack "$@"
}
airmon(){
	del_stopped airmon

	docker run -it \
		-v ${PWD}:/tester \
		-w="/tester"
		--net host \
		--privileged \
		--entrypoint airmon-ng \
		--name airmon \
		brokenscripts/aircrack "$@"
}
airodump(){
	del_stopped airodump

	docker run -it \
		-v ${PWD}:/tester \
		-w="/tester"
		--net host \
		--privileged \
		--entrypoint airodump-ng \
		--name airodump \
		brokenscripts/aircrack "$@"
}

burp(){
	del_stopped burp

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		--name burp \
		--net host \
		brokenscripts/burp
}

# Bound to host's pulseaudio (See VLC Below)
chromedocker(){
	# add flags for proxy if passed
	local proxy=
	local map
	local args=$*
	if [[ "$1" == "tor" ]]; then
		relies_on torproxy

		map="MAP * ~NOTFOUND , EXCLUDE torproxy"
		proxy="socks5://torproxy:9050"
		args="https://check.torproject.org/api/ip ${*:2}"
	fi

	del_stopped chrome

	# one day remove /etc/hosts bind mount when effing
	# overlay support inotify, such bullshit

#		-v "${HOME}/.config/google-chrome:/data" \
#		--device /dev/nvidia0 \
	docker run -d \
		--net host \
		--memory 2gb \
		-e "DISPLAY=unix${DISPLAY}" \
		-e PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native \
		-v ${XDG_RUNTIME_DIR}/pulse/native:${XDG_RUNTIME_DIR}/pulse/native:Z \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/Containers/Downloads:/home/chrome/Downloads" \
		-v /dev/shm:/dev/shm \
		-v /etc/hosts:/etc/hosts \
		--security-opt seccomp:/etc/docker/seccomp/chrome.json \
		--device /dev/snd \
		--device /dev/dri \
		--device /dev/video0 \
		--device /dev/usb \
		--device /dev/bus/usb \
		--group-add audio \
		--group-add $(getent group audio | cut -d: -f3) \
		--group-add video \
		--name chrome \
		${DOCKER_REPO_PREFIX}/chrome --user-data-dir=/data \
		--proxy-server="$proxy" \
		--host-resolver-rules="$map" "$args"

}
floss(){
	local file
	file=$(realpath "$1")

	docker run --rm -it \
		--name floss \
		-v "${file}:/tester/$(basename "${file}")" \
		brokenscripts/floss "$@"
}
john(){
	local file
	file=$(realpath "$1")

	docker run --rm -it \
		--name john \
		-v "${file}:/root/$(basename "${file}")" \
		${DOCKER_REPO_PREFIX}/john "$@"
}
libreoffice(){
	del_stopped libreoffice

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "${HOME}/Containers/slides:/root/slides" \
		-v "${HOME}/Containers/Downloads:/root/Downloads" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--name libreoffice \
		${DOCKER_REPO_PREFIX}/libreoffice
}
netcat(){
	docker run --rm -it \
		--net host \
		--name netcat \
		${DOCKER_REPO_PREFIX}/netcat "$@"
}
nmap(){
	if [[ -n "$(which nmap)" ]]; then
		"$(which nmap)" "$@"
	else
		docker run --rm -it \
			--net host \
			${DOCKER_REPO_PREFIX}/nmap "$@"
	fi
}
powershell(){
	docker run --rm -it \
		--net host \
		--name powershell \
		${DOCKER_REPO_PREFIX}/powershell "$@"
}
alias pwsh="powershell"

pulseaudio(){
	del_stopped pulseaudio

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /var/run/dbus:/var/run/dbus \
		-v /etc/machine-id:/etc/machine-id \
		--device /dev/snd \
		-p 4713:4713 \
		--restart always \
		--group-add audio \
		--name pulseaudio \
		${DOCKER_REPO_PREFIX}/pulseaudio
}

skype(){
	del_stopped skype
	relies_on pulseaudio

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e "DISPLAY=unix${DISPLAY}" \
		--link pulseaudio:pulseaudio \
		-e PULSE_SERVER=pulseaudio \
		--security-opt seccomp:unconfined \
		--device /dev/video0 \
		--group-add video \
		--group-add audio \
		--name skype \
		${DOCKER_REPO_PREFIX}/skype
}
slack(){
	del_stopped slack

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/Containers/Downloads:/root/Downloads" \
		-v /run/dbus/system_bus_socket:/run/dbus/system_bus_socket \
		-v /dev/shm:/dev/shm \
		-e "DISPLAY=unix${DISPLAY}" \
		--device /dev/snd \
		--device /dev/dri \
		--device /dev/video0 \
		--group-add audio \
		--group-add video \
		-v "${HOME}/Containers/slack:/root/.config/Slack" \
		--name slack \
		${DOCKER_REPO_PREFIX}/slack "$@"
}
# 		${DOCKER_REPO_PREFIX}/spotify
spotify(){
	del_stopped spotify

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v ${XDG_RUNTIME_DIR}/pulse/native:${XDG_RUNTIME_DIR}/pulse/native:Z \
		-e PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native \
		-e "DISPLAY=unix${DISPLAY}" \
		-e QT_DEVICE_PIXEL_RATIO \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/dri \
		--device /dev/video0 \
		--group-add audio \
		--group-add $(getent group audio | cut -d: -f3) \
		--group-add video \
		--name spotify \
		brokenscripts/spotify
}
ssh2john(){
	local file
	file=$(realpath "$1")

	docker run --rm -it \
		-v "${file}:/root/$(basename "${file}")" \
		--entrypoint ssh2john \
		--name ssh2john \
		${DOCKER_REPO_PREFIX}/john "$@"
}

# Modified VLC to use Host pulseaudio
# Allows Host AND Vlc to use audio simultaneously
vlc(){
	del_stopped vlc

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/Containers/Torrents:/home/vlc/Torrents" \
		-v ${XDG_RUNTIME_DIR}/pulse/native:${XDG_RUNTIME_DIR}/pulse/native:Z \
		-e PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native \
		-e "DISPLAY=unix${DISPLAY}" \
		-e GDK_SCALE \
		-e GDK_DPI_SCALE \
		-e QT_DEVICE_PIXEL_RATIO \
		--group-add audio \
		--group-add $(getent group audio | cut -d: -f3) \
		--group-add video \
		--device /dev/dri \
		--name vlc \
		${DOCKER_REPO_PREFIX}/vlc --no-qt-privacy-ask
}

wireshark(){
	del_stopped wireshark

	docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-v "${HOME}/Containers/Downloads:/home/wireshark/Downloads" \
		-e "DISPLAY=unix${DISPLAY}" \
		--cap-add NET_RAW \
		--cap-add NET_ADMIN \
		--net host \
		--name wireshark \
		${DOCKER_REPO_PREFIX}/wireshark
}
